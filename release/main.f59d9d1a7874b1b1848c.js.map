{"version":3,"file":"main.f59d9d1a7874b1b1848c.js","mappings":"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AE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,a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EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAA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ACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACzF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS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AQ,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnF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","sources":["webpack://turing-machine/./src/common.ts","webpack://turing-machine/./src/gestureDetector.ts","webpack://turing-machine/./src/rule.ts","webpack://turing-machine/./src/ruleSet.ts","webpack://turing-machine/./src/tape.ts","webpack://turing-machine/./src/tapeView.ts","webpack://turing-machine/./src/turingMachine.ts","webpack://turing-machine/webpack/bootstrap","webpack://turing-machine/webpack/runtime/define property getters","webpack://turing-machine/webpack/runtime/hasOwnProperty shorthand","webpack://turing-machine/webpack/runtime/make namespace object","webpack://turing-machine/./src/index.ts"],"sourcesContent":["export enum AnimationPhases {\n    Standstill,\n    Accelerating,\n    MaxSpeed,\n    Decelerating,\n    DigitChanging\n};\n\nexport enum AnimationDirections {\n    Left,\n    Right,\n    None\n};\n\nexport enum RunModes {\n    SingleStep,\n    Normal\n}\n\nexport enum Actions {\n    MoveLeft,\n    MoveRight,\n    Halt\n}\n\nexport enum BinaryValues {\n    Zero,\n    One\n}\n\n\nexport class BinaryValuesUtil {\n    public static opposite(binaryValue: BinaryValues) {\n        return binaryValue == BinaryValues.Zero ? BinaryValues.One : BinaryValues.Zero;\n    }\n}\n\n/** RunState */\nexport enum RunStates {\n    Idle,\n    Running,\n    Halted\n}\n\nexport enum SwipeDirections {\n    Up,\n    Down,\n    Left,\n    Right,\n    None\n}\n\n","import { SwipeDirections } from \"./common\";\n\nexport class GestureDetector extends EventTarget  {\n\n    private static instance: GestureDetector;\n\n    private _touchSurface: HTMLElement;\n    private _swipeStartX:number;\n    private _swipeStartY:number;\n    /**  Required min distance traveled to be considered swipe */\n    private _swipeThresholdPx = 150; \n    /** maximum distance allowed at the same time in perpendicular direction */\n    private _swipeRestraint = 100;\n    /** maximum time allowed to travel that distance */\n    private _swipeAllowedTime = 300;\n    private _doubleTapTimeoutMs = 300;\n    private _tapedOnce = false;\n    private _startTime:number;\n\n    private constructor(touchSurface:HTMLElement, doubleTapTimeoutMs:number = 300, swipeThresholdPx:number = 150) {\n        super();\n        this._touchSurface = touchSurface;\n        this._swipeThresholdPx = swipeThresholdPx;\n        this._doubleTapTimeoutMs = doubleTapTimeoutMs;\n        this._touchSurface.addEventListener('touchstart', (e: TouchEvent) => { this.touchStart(e) }, false);\n        this._touchSurface.addEventListener('touchmove', (e: TouchEvent) => { this.touchMove(e) }, false);\n        this._touchSurface.addEventListener('touchend', (e: TouchEvent) => { this.touchEnd(e) }, false);\n    }\n\n    /**\n     * The static method that controls the access to the singleton instance.\n     *\n     * This implementation let you subclass the Singleton class while keeping\n     * just one instance of each subclass around.\n     */\n    public static getInstance(touchSurface:HTMLElement,): GestureDetector {\n        if (!GestureDetector.instance) {\n            GestureDetector.instance = new GestureDetector(touchSurface);\n        }\n        return GestureDetector.instance;\n    }\n\n    private touchStart = (e: TouchEvent) => {\n        var touch = e.changedTouches[0];\n        this._swipeStartX = touch.pageX;\n        this._swipeStartY = touch.pageY\n        this._startTime = new Date().getTime(); // record time when finger first makes contact with surface\n    \n        if(!this._tapedOnce) {\n            this._tapedOnce = true;\n            setTimeout( () => { this._tapedOnce = false; }, this._doubleTapTimeoutMs );\n            return false;\n        }\n        e.preventDefault();\n        e.stopPropagation(); \n        // double tapped\n        this.dispatchDoubleTapEvent(touch.pageX, touch.pageY);\n    }\n\n    /** Dispatch a swipe event */\n    private dispatchSwipeEvent(swipeDirection: SwipeDirections, distanceX: number, distanceY: number, elapsedTimeMs: number): boolean {\n        return this.dispatchEvent(new CustomEvent<{distanceX: number; distanceY: number; elapsedTimeMs: number;}>(\n            \"swipe-\" + SwipeDirections[swipeDirection].toLowerCase(), { detail: { distanceX: distanceX, distanceY: distanceY, elapsedTimeMs: elapsedTimeMs } }));\n    }\n\n    /** Dispatch a double-tap event */\n    private dispatchDoubleTapEvent(x: number, y: number): boolean {\n        return this.dispatchEvent(new CustomEvent<{x: number; y: number;}>(\n                \"double-tap\", { detail: { x: x, y: y } }));\n    }\n\n    private touchMove = (e: TouchEvent) => {\n        e.preventDefault(); // prevent scrolling when inside DIV\n    }\n\n    private touchEnd = (e: TouchEvent) => {\n        var touch = e.changedTouches[0];\n        // horizontal distance traveled by finger while in contact with surface\n        var swipeDistanceX = touch.pageX - this._swipeStartX; \n        // vertical distance traveled by finger while in contact with surface\n        var swipeDistanceY = touch.pageY - this._swipeStartY; \n        var elapsedTime = new Date().getTime() - this._startTime;\n        var swipeDirection = SwipeDirections.None;\n        if (elapsedTime <= this._swipeAllowedTime) { // first condition for a swipe met\n            if (Math.abs(swipeDistanceX) >= this._swipeThresholdPx && Math.abs(swipeDistanceY) <= this._swipeRestraint) { // 2nd condition for horizontal swipe met\n                swipeDirection = (swipeDistanceX < 0) ? SwipeDirections.Left : SwipeDirections.Right; // if dist traveled is negative, it indicates left swipe\n            } else if (Math.abs(swipeDistanceY) >= this._swipeThresholdPx && Math.abs(swipeDistanceX) <= this._swipeRestraint) { // 2nd condition for vertical swipe met\n                swipeDirection = (swipeDistanceY < 0) ? SwipeDirections.Up : SwipeDirections.Down; // if dist traveled is negative, it indicates up swipe\n            };\n        };\n        this.dispatchSwipeEvent(swipeDirection, swipeDistanceX, swipeDistanceY, elapsedTime);\n        e.preventDefault();\n    }\n}\n\n//USAGE:\n/*\nvar el = document.getElementById('someel')\nswipedetect(el, function(swipedir){\n    swipedir contains either \"none\", \"left\", \"right\", \"top\", or \"down\"\n    if (swipedir =='left')\n        alert('You just swiped left!')\n})\n*/","import { Actions, BinaryValues, BinaryValuesUtil, RunStates } from './common';\n/**\n * @Class\n * Turing machine rule class. This class models a single turing machine rule. \n */\nexport class Rule {\n    /** for what internal state of the turing machine does the rule applies */\n    forState: number; \n    /** in what of the two cases of tape content read this rule applies */\n    whenRead: BinaryValues;\n    /** rule's turing machine action - move in what direction */\n    action: Actions;\n    /** rule's turing machine action - the new state to transition to */\n    transitionToState: number;\n    /** rule's turing machine action - shall the tape content be altered? */\n    flipTapeValue: boolean;\n    /** index of the rule when it is member of a rule set */\n    index: number = 0;\n\n    constructor(ruleDef: { forState: number, whenRead: BinaryValues, transitionToState: number, \n                            action: Actions, flipTapeValue: boolean } ) {\n        ({ forState: this.forState, whenRead: this.whenRead, transitionToState: this.transitionToState,\n         action: this.action, flipTapeValue: this.flipTapeValue } = ruleDef);\n    }\n}\n\nRule.prototype.toString = function ruleToString() {\n    return `${this.index}: ${this.forState} ${this.whenRead} -> ` + \n        `${this.transitionToState} ${Actions[this.action]} ` + \n        `${ !this.flipTapeValue ? this.whenRead : BinaryValuesUtil.opposite(this.whenRead) }`;\n};","import { BinaryValues } from './common';\nimport { Rule } from './rule';\n\n/**\n * @Class\n * Rule set class. This class models a set of turing machine rules. \n */\nexport class RuleSet {\n\n    private _index: { [state: number]: { zero: Rule, one: Rule }; } = {};\n\n    private _list: Rule[] = [];\n\n    constructor(rules: Rule[]) {\n        // and index them \n        rules.forEach(rule => { this.addRule(rule); }); \n    }\n\n    private addToIndex(rule: Rule): void {\n        rule.index = this._list.length;\n        if (rule.whenRead == BinaryValues.Zero) {\n            this._index[rule.forState].zero = rule;\n        } else if (rule.whenRead == BinaryValues.One) {\n            this._index[rule.forState].one = rule;\n        }\n    }\n\n    addRule(rule: Rule, override: boolean = false): void {\n        if (rule.forState in this._index) {\n            if ((! override) && \n                ((rule.whenRead == BinaryValues.Zero) &&  (!(this._index[rule.forState].zero == null))) ||\n                ((rule.whenRead == BinaryValues.One) &&  (!(this._index[rule.forState].one == null)))\n            ) {\n                throw new Error('Rule for that state and value already defined. Set override to true to force overwrite of existing rule.');\n            }\n            this.addToIndex(rule);\n            this._list.push(rule);\n        } else {\n            this._index[rule.forState] = { zero: null, one: null};\n            this.addToIndex(rule);\n            this._list.push(rule);\n        }\n    }\n\n    getRule(state: number, value: BinaryValues): Rule {\n        if (!(state in this._index)) {\n            return null;\n        };\n        if (value == BinaryValues.Zero) {\n            return this._index[state].zero;\n        } \n        return this._index[state].one;\n    }\n}\n","import { BinaryValues } from \"./common\";\n/**\n * @Class\n * Turing machine tape class. This class models the endless tape used by the turing machine. \n * It has a currentLocationIndex property to mark the place currently exposed to the machine.\n * It may be indexed with both positive and negative indices so that one can move in both directions of the tape.\n * The tape in pre-initialized with zeros at all it's locations. \n */\nexport class Tape extends EventTarget {\n    /** array keeping positive location index defined values */\n    private _positiveIndices: BinaryValues[];\n    /** array keeping negative location index defined values */\n    private _negativeIndices: BinaryValues[];\n    /** the current location index */\n    _currentLocationIndex: number;\n    /** minimal tape location index that was defined. either positive or negative number. \n     * all indices less than that one are assumed to be 0. */\n    private _min_defined_index: number;\n    /** minimal tape location index that was defined */\n    private _max_defined_index: number;\n    /** is the tape in locked state */\n    private _locked: boolean = false;\n    /** flag indicating tape is in moving state. while moving, tape can not be moved. */\n    private _moving: boolean = false;\n    /** flag indicating move direction. */\n    private _movingLeft: boolean = false;\n    /** set to true if you want the tape to auto complete moves, without need for moveComplete() call. */\n    public autocompleteMove: boolean = false;\n\n    /** Create a new tape instance\n     * @param {Array.<Number>} contents The contents of the tape - array of ones and zeroes. it is \n     *                         placed on the tape from the location index zero.\n     * @param {Number} currentLocationIndex The index of the tape location currently exposed to the \n     *                                      turing machine\n     */\n    constructor(contents: Array<number> = [], currentLocationIndex: number = 0) {\n        super();\n        if (contents.length == 0) {\n            throw new Error('Contents was empty, but required at least one element.');\n        }\n\n        this._min_defined_index = 0\n        this._max_defined_index = contents.length - 1;\n        console.log(\"this.contents: \" + contents);\n        console.log(\"this.max_defined_index: \" + this._max_defined_index);\n        \n        /** Array of positive indices */ \n        this._positiveIndices = contents.map(x => x==0 ? BinaryValues.Zero : BinaryValues.One);\n        /** Array of negative indices */ \n        this._negativeIndices = [];\n        /** The index of the tape location currently exposed to the turing machine */\n        this._currentLocationIndex = currentLocationIndex;\n    }\n\n    /** The current location index setter */\n    set currentLocationIndex(location: number) {\n        let oldLocationIndex = this._currentLocationIndex;\n        if (oldLocationIndex == location){\n            return;\n        }\n        this._currentLocationIndex = location;\n        this.dispatchTapeEvent(\"location-changed\", oldLocationIndex, location);\n    }\n\n    /** The current location index getter */\n    get currentLocationIndex(): number {\n        return this._currentLocationIndex;\n    }\n\n    /** What is the maximum defined tape index. All tape indices above this one are 0 */\n    get maxDefinedIndex(): number {\n        return this._max_defined_index;\n    }\n\n    /** What is the minimum defined tape index. All tape indices below this one are 0 */\n    get minDefinedIndex(): number {\n        return this._min_defined_index;\n    }\n\n    /** Is the tape locked? If so, it can not be moved either left nor right. */\n    get isLocked(): boolean {\n        return this._locked;\n    }\n\n    /** Is the tape currently in moving state? If so, it can not be moved either left nor right. */\n    get isMoving(): boolean {\n        return this._moving;\n    }\n\n    /** Lock tape for movement. The tape move left and move right methods do not work when tape is locked. */\n    lock(): void {\n        this.dispatchTapeEvent(\"locked\", this._currentLocationIndex, this._currentLocationIndex);\n        this._locked = true;\n    }\n\n    /** Unlock the tape to allow for movement. */\n    unlock(): void {\n        this.dispatchTapeEvent(\"unlocked\", this._currentLocationIndex, this._currentLocationIndex);\n        this._locked = true;\n    }\n\n    /** Moves the tape one position to the left */\n    moveLeft():void {\n        if (this.isLocked || this.isMoving) {\n            return;\n        }\n        this._moving = true;\n        this._movingLeft = true;\n        this.dispatchTapeEvent(\"move-started\", this._currentLocationIndex, this.currentLocationIndex + 1);\n        if (this.autocompleteMove) {\n            this.moveComplete();\n        }\n    }\n\n    /** Moves the tape one position to the right */\n    moveRight():void {\n        if (this.isLocked || this.isMoving) {\n            return;\n        }\n        this._moving = true;\n        this._movingLeft = false;\n        this.dispatchTapeEvent(\"move-started\", this._currentLocationIndex, this.currentLocationIndex - 1);\n        if (this.autocompleteMove) {\n            this.moveComplete();\n        }\n    }\n\n    moveComplete():void {\n        let c = this._currentLocationIndex;\n        if (this._movingLeft == true) {\n            this._currentLocationIndex += 1;\n        } else {\n            this._currentLocationIndex -= 1;\n        }\n        this._moving = false;\n        this.dispatchTapeEvent(\"move-completed\", c, this._currentLocationIndex);\n    }\n\n    /** The length of the tape with defined (non-zero) values\n     * @returns the length of the tape with defined values\n     */\n    get length(): number {\n        return this._max_defined_index - this._min_defined_index + 1;\n    }\n\n    /** Read the contents of the tape at the current location index. \n     * @returns {Number} The contents of the tape at the current location index.\n     */\n    read(index: number = null): number {\n        if (index == null) {\n            index = this.currentLocationIndex;\n        }\n        if (index >= 0) {\n            return this.readFromArray(this._positiveIndices, index);\n        } else {\n            return this.readFromArray(this._negativeIndices, index);\n        }\n    }\n\n    /** Write a value to the tape at the current location index.\n     * @param {Number} value The value to write - 1 or 0\n     */\n    write(value: BinaryValues, index: number = null): void {\n        if (index == null) {\n            index = this.currentLocationIndex;\n        }\n        if (index < this._min_defined_index) {\n            this._min_defined_index = index;\n        }\n        if (index > this._max_defined_index) {\n            this._max_defined_index = index;\n        }\n        if (index >= 0) {\n            this._positiveIndices = this.writeToArray(this._positiveIndices, value, index);\n        } else {\n            this._negativeIndices = this.writeToArray(this._negativeIndices, value, index);\n        }\n    }\n\n    /** Dispatch a tape event */\n    private dispatchTapeEvent(type: string, oldLocation: number, newLocation: number): boolean {\n        return this.dispatchEvent(new CustomEvent<{tape: Tape; oldLocation: number; newLocation: number;}>(\n                type, { detail: { tape: this, oldLocation: oldLocation, newLocation: newLocation } }));\n    }\n    \n    /** Read a value from an array - either positive or negative indices\n     * @param {Array.<BinaryValues>} anArray array of positive or negative indices to read from\n     * @returns the value at the current location index of the given array\n     */\n    private readFromArray(anArray: Array<BinaryValues>, index: number): BinaryValues {\n        var l = Math.abs(index);\n        // check the array bounds\n        if (l >= anArray.length) {\n            // out of bounds of so far defined positive numbers - therefore presumably 0\n            return BinaryValues.Zero;\n        }\n        return anArray[l];\n    }\n\n    /** Write a value to an array - either positive or negative indices\n     * @param {Array.<Boolean>} anArray array of positive or negative indices to write to\n     * @param {Number} value value to write - wither 0 or 1\n     * @returns {Array.<Boolean>} The resulting array after the operation\n     */\n    private writeToArray(anArray: Array<BinaryValues>, value: BinaryValues, index: number): Array<BinaryValues> {\n        var l = Math.abs(index);\n        let array_length = anArray.length\n        // is the index within already defined range?\n        if (l >= array_length) {\n\n            // if this is negative indices array, we need to pre-append a value (for example 0) at index 0. \n            // this value will never be accessed as by the convention, the positive indices array 0 index\n            // is the holder of the 0 index of the combined array            \n            if (array_length == 0 && index < 0) {\n                anArray.push(0);\n            }\n            // outside of so far defined numbers\n            var difference = l - array_length;\n            if (difference > 1) {\n                // we will enlarge the array, hopefully there will be enough memory for that \n                anArray = anArray.concat(new Array(difference - 1).fill(false));\n            }\n            // append the value at the top of the array\n            anArray.push(value);\n        } else {\n            // inside of the so far defined numbers - we will update the current value \n            anArray[l] = value;\n        }\n        return anArray;\n    }\n}\n\n\n","import { Tape } from './tape';\nimport { AnimationPhases, AnimationDirections } from './common';\nimport { GestureDetector } from './gestureDetector';\n\n/** single cell width in mm on original (pre-scaled) svg image */\nconst CELL_WIDTH = 10\n/** single cell height in mm on original (pre-scaled) svg image */\nconst CELL_HEIGHT = 13\n/** number of cells in a chunk */\nconst CELLS_IN_CHUNK = 4\n/** width of a single chunk of cells */\nconst CHUNK_OF_CELLS_WIDTH = CELLS_IN_CHUNK * CELL_WIDTH\n/** the color of the tape frame lines */\nconst DEFAULT_TAPE_FRAME_COLOR = \"rgb(56,56,56)\" // dark gray\n/** the color of the digits on the tape */\nconst DEFAULT_TAPE_DIGIT_COLOR = \"rgb(80,80,80)\" // bit less dark gray\n/** the color of the tape background */\nconst DEFAULT_TAPE_BACKGROUND_COLOR = \"#D3D3D3\";\n/** the color of the digit at the current location */\nconst DEFAULT_CURRENT_DIGIT_COLOR = \"rgb(0,0,0)\" // even darker gray\n/** the acceleration when starting to move */\nconst ACCELERATION = 20;\n/** the maximum speed at which the acceleration stops */\nconst MAX_SPEED = 1;\nconst DEFAULT_VELOCITY = 1/10;\n/** the minimum speed at which the deceleration stops until a possible top location achieved. */\nconst MIN_SPEED = 1/50;\n/** the deceleration speed when the movement is stopping */\nconst DECELERATION = 20;\n/** velocity increase/decrease when speeding up/down */\nconst VELOCITY_CHANGE_STEP = 0.01;\n\n/**\n * @Class \n * Tape view class handles displaying of the tape on the html canvas\n */\n export class TapeView extends EventTarget {\n    /** the tape to view */\n    tape: Tape;\n    /** 2d html canvas context to draw on */\n    ctx: CanvasRenderingContext2D\n    /** canvas */\n    canvas: HTMLCanvasElement;\n    /** x scale factor */\n    xScale: number;\n    /** y scale factor */\n    yScale: number;\n    /** digit color */\n    digitColor: string;\n    /** current digit color */\n    currentDigitColor: string;\n    /** frame color */\n    frameColor: string;\n    /** background color */\n    backgroundColor: string;\n    /** animation phase */\n    animationPhase: AnimationPhases;\n    /** current velocity */\n    currentVelocity: number;\n    /** current acceleration */\n    currentAcceleration: number;\n    /** current animation direction */\n    animationDirection: AnimationDirections;\n    /** animation offset */\n    animationOffset: number;\n    /** flag marking that tape was already moved, so no need to move it in the end of the animation. */\n    alreadyMoved: boolean;\n    /** velocity */\n    velocity: number;\n    /** acceleration */\n    acceleration: number;\n\n    /** Create a new tape view instance\n     * @param {Tape} tape tape instance to view\n     * @param {CanvasRenderingContext2D} ctx the canvas 2d context to draw on\n     */\n    constructor(tape: Tape, canvas: HTMLCanvasElement, body : HTMLBodyElement) {\n        super();\n        this.tape = tape;\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.xScale = SCALE_FACTOR;\n        this.yScale = SCALE_FACTOR;\n        this.digitColor = DEFAULT_TAPE_DIGIT_COLOR;\n        this.currentDigitColor = DEFAULT_CURRENT_DIGIT_COLOR;\n        this.frameColor = DEFAULT_TAPE_FRAME_COLOR;\n        this.backgroundColor = DEFAULT_TAPE_BACKGROUND_COLOR;\n        this.animationPhase = AnimationPhases.Standstill;\n        this.currentVelocity = 0;\n        this.currentAcceleration = 0.0004;\n        this.animationDirection = AnimationDirections.None;\n        this.animationOffset = 0;\n        this.velocity = DEFAULT_VELOCITY;\n        body.addEventListener('keydown', this.keyboardHandler, true);\n        this.tape.addEventListener('location-changed', this.tapeLocationChangedHandler);\n        this.tape.addEventListener('move-started', this.tapeMoveHandler);\n        let gestureDetector = GestureDetector.getInstance(canvas);\n        gestureDetector.addEventListener(\"swipe-left\", this.swipeLeftHandler);\n        gestureDetector.addEventListener(\"swipe-right\", this.swipeRightHandler);\n        gestureDetector.addEventListener(\"swipe-up\", this.swipeUpHandler);\n        gestureDetector.addEventListener(\"swipe-down\", this.swipeDownHandler);\n    }\n\n    private tapeLocationChangedHandler = (e: any): void => {\n        // TODO: Implement this use-case with animation\n      console.log('old location %s, new location %s', e.detail.oldLocation, e.detail.newLocation);\n      //this.tape.__currentLocationIndex = e.detail.oldLocation;\n      //this.animationStart(e.detail.oldLocation > e.detail.newLocation ? AnimationDirections.Left : AnimationDirections.Right);\n    }\n\n    private swipeLeftHandler = (e: any): void => {\n        this.tape.moveLeft();\n    }\n  \n    private swipeRightHandler = (e: any): void => {\n        this.tape.moveRight();\n    }\n\n    private swipeUpHandler = (e: any): void => {\n        this.increaseVelocity();\n    }\n  \n    private swipeDownHandler = (e: any): void => {\n        this.decreaseVelocity();\n    }\n\n    private increaseVelocity() {\n        if (this.currentVelocity < MAX_SPEED) {\n            this.currentVelocity += VELOCITY_CHANGE_STEP;\n        }\n    }\n\n    private decreaseVelocity() {\n        if (this.currentVelocity > MIN_SPEED) {\n            this.currentVelocity -= VELOCITY_CHANGE_STEP;\n        }\n    }\n\n    private tapeMoveHandler = (e: any): void => {\n        this.animationStart(e.detail.oldLocation > e.detail.newLocation ? AnimationDirections.Right : AnimationDirections.Left);        \n    }\n\n    private keyboardHandler = (k: KeyboardEvent): void => {\n        if (k.defaultPrevented) {\n            return; // Do nothing if the event was already processed\n        }\n        switch (k.key) {\n            case \"Up\": // IE/Edge specific value\n            case \"ArrowUp\":\n                this.increaseVelocity();\n                break;\n            case \"Down\": // IE/Edge specific value\n            case \"ArrowDown\":\n                this.decreaseVelocity();\n                break;\n            case \"Left\": // IE/Edge specific value\n            case \"ArrowLeft\":\n                /* do nothing if animation already in progress */\n                if (this.animationPhase != AnimationPhases.Standstill) {\n                    k.preventDefault();\n                    return;\n                }\n                this.tape.moveRight();\n                break;\n            case \"Right\": // IE/Edge specific value\n            case \"ArrowRight\":\n                /* do nothing if animation already in progress */\n                if (this.animationPhase != AnimationPhases.Standstill) {\n                    k.preventDefault();\n                    return;\n                }\n                this.tape.moveLeft();\n                break;\n            default:\n                return; // Quit when this doesn't handle the key event.\n        }\n        k.preventDefault();\n    }\n\n    private animationStart(direction: AnimationDirections) {\n        this.dispatchTapeViewEvent(\"animation-started\");\n        this.animationPhase = AnimationPhases.Accelerating;\n        this.animationDirection = direction;\n    }\n\n    private animationStop() {\n        this.animationPhase = AnimationPhases.Standstill;\n        this.tape.moveComplete();\n        // if (this.animationDirection == AnimationDirections.Left) {\n        //     this.tape.moveLeft();\n        // } else if (this.animationDirection == AnimationDirections.Right) {\n        //     this.tape.moveRight();\n        // }\n        this.animationDirection = AnimationDirections.None;\n        //this.currentAcceleration = 0;\n        this.currentVelocity = 0;\n        this.animationOffset = 0;\n        this.dispatchTapeViewEvent(\"animation-completed\");\n    }\n\n    /** Applies the scale and translate transformations in the 2d context so \n     * that we are at the visible chunks top left coordinate */\n    private moveToVisibleChunksTopLeft(): void {\n        let visibleChunksTopLeft = this.visibleChunksTopLeft;\n        this.ctx.scale(this.xScale, this.yScale);\n        this.ctx.translate(visibleChunksTopLeft.x, visibleChunksTopLeft.y);\n    }\n\n    /** Draw single chunk */\n    private drawChunk() {\n        // #tapeFourCells\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.frameColor;\n        this.ctx.lineWidth = 0.070004;\n        this.ctx.moveTo(1.330369, 15.078956);\n        this.ctx.lineTo(1.330369, 15.078956);\n        this.ctx.bezierCurveTo(5.281924, 14.837656, 9.231624, 14.569896, 13.184763, 14.354796);\n        this.ctx.bezierCurveTo(13.450934, 14.340296, 13.721867, 14.339996, 13.983540, 14.390296);\n        this.ctx.bezierCurveTo(14.168484, 14.425696, 14.317709, 14.628416, 14.505034, 14.607786);\n        this.ctx.bezierCurveTo(15.135801, 14.538486, 15.716826, 14.199266, 16.347592, 14.130206);\n        this.ctx.bezierCurveTo(16.540474, 14.109006, 16.694197, 14.339496, 16.887872, 14.347166);\n        this.ctx.bezierCurveTo(18.562155, 14.413566, 20.238820, 14.361466, 21.914157, 14.351166);\n        this.ctx.bezierCurveTo(22.093287, 14.350166, 22.277967, 14.361466, 22.450207, 14.312266);\n        this.ctx.bezierCurveTo(22.550217, 14.283666, 22.599167, 14.147436, 22.701027, 14.126006);\n        this.ctx.bezierCurveTo(22.962177, 14.071006, 23.236287, 14.054806, 23.500607, 14.090806);\n        this.ctx.bezierCurveTo(23.775767, 14.128406, 24.017867, 14.367026, 24.294617, 14.343476);\n        this.ctx.bezierCurveTo(24.926707, 14.289476, 25.509057, 13.954546, 26.137177, 13.865906);\n        this.ctx.bezierCurveTo(26.243537, 13.850806, 26.297517, 14.045556, 26.404937, 14.045296);\n        this.ctx.bezierCurveTo(26.597017, 14.044766, 26.760527, 13.853736, 26.952617, 13.864056);\n        this.ctx.bezierCurveTo(28.452807, 13.944256, 29.934737, 14.315696, 31.437307, 14.314106);\n        this.ctx.bezierCurveTo(31.983407, 14.313316, 32.472087, 13.948716, 33.010517, 13.856906);\n        this.ctx.bezierCurveTo(33.365857, 13.796306, 33.734677, 13.811906, 34.091867, 13.860906);\n        this.ctx.bezierCurveTo(34.278397, 13.886606, 34.426037, 14.099036, 34.613367, 14.078396);\n        this.ctx.bezierCurveTo(35.244127, 14.009096, 35.825157, 13.669876, 36.455917, 13.600826);\n        this.ctx.bezierCurveTo(36.648807, 13.579626, 36.802527, 13.806936, 36.996197, 13.817786);\n        this.ctx.bezierCurveTo(38.277847, 13.888386, 39.910307, 13.610186, 41.173957, 13.833986);\n        this.ctx.bezierCurveTo(41.925257, 11.864776, 41.080457, 3.974236, 41.065197, 1.657736);\n        this.ctx.bezierCurveTo(41.049597, -0.711994, 40.714787, 0.162956, 40.346167, 0.136576);\n        this.ctx.bezierCurveTo(39.957907, 0.108776, 39.600987, 0.648086, 39.492547, 0.492576);\n        this.ctx.bezierCurveTo(39.112617, 0.245356, 38.933947, 0.435076, 38.818327, 0.360686);\n        this.ctx.bezierCurveTo(38.152107, 0.420586, 37.486937, 0.253486, 37.486937, 0.253486);\n        this.ctx.bezierCurveTo(36.855117, 0.366996, 36.573397, 0.254486, 35.935487, 0.324286);\n        this.ctx.bezierCurveTo(34.971877, 0.428796, 33.994767, 0.386486, 33.027447, 0.324026);\n        this.ctx.bezierCurveTo(32.838537, 0.311826, 32.690107, 0.139076, 32.504367, 0.102566);\n        this.ctx.bezierCurveTo(32.242167, 0.050966, 31.970967, 0.063366, 31.703737, 0.063366);\n        this.ctx.bezierCurveTo(31.436507, 0.063366, 31.165317, 0.050966, 30.903107, 0.102566);\n        this.ctx.bezierCurveTo(30.717377, 0.139066, 30.566557, 0.292536, 30.379767, 0.324026);\n        this.ctx.bezierCurveTo(30.119677, 0.367926, 29.848477, 0.366126, 29.587867, 0.324026);\n        this.ctx.bezierCurveTo(29.312967, 0.279526, 29.069017, 0.100976, 28.792267, 0.067376);\n        this.ctx.bezierCurveTo(28.355437, 0.014476, 27.906437, -0.004024, 27.471997, 0.067116);\n        this.ctx.bezierCurveTo(26.838057, 0.171096, 26.255177, 0.519016, 25.616737, 0.588866);\n        this.ctx.bezierCurveTo(24.653127, 0.694436, 23.676017, 0.651066, 22.708707, 0.588606);\n        this.ctx.bezierCurveTo(22.519787, 0.576406, 22.369507, 0.412396, 22.185627, 0.367146);\n        this.ctx.bezierCurveTo(22.011787, 0.324246, 21.828697, 0.328246, 21.649577, 0.328246);\n        this.ctx.bezierCurveTo(21.382347, 0.328246, 21.111147, 0.315546, 20.848947, 0.367146);\n        this.ctx.bezierCurveTo(20.663207, 0.403646, 20.514517, 0.574056, 20.325603, 0.588606);\n        this.ctx.bezierCurveTo(19.535028, 0.648906, 18.737309, 0.647106, 17.946205, 0.588606);\n        this.ctx.bezierCurveTo(17.753059, 0.574306, 17.598807, 0.348096, 17.406455, 0.372176);\n        this.ctx.bezierCurveTo(16.860355, 0.440476, 16.374315, 0.794716, 15.827157, 0.853456);\n        this.ctx.bezierCurveTo(14.863280, 0.956646, 13.886174, 0.920156, 12.919122, 0.853186);\n        this.ctx.bezierCurveTo(12.641309, 0.833886, 12.401597, 0.617706, 12.123520, 0.596546);\n        this.ctx.bezierCurveTo(11.244574, 0.530146, 10.360336, 0.583546, 9.478744, 0.592546);\n        this.ctx.bezierCurveTo(9.211515, 0.595546, 8.940317, 0.580146, 8.678115, 0.631746);\n        this.ctx.bezierCurveTo(8.492378, 0.668246, 8.341301, 0.820126, 8.154769, 0.852936);\n        this.ctx.bezierCurveTo(7.978821, 0.883936, 7.792290, 0.864536, 7.619782, 0.818036);\n        this.ctx.bezierCurveTo(7.516065, 0.790236, 7.458386, 0.617746, 7.353082, 0.637856);\n        this.ctx.bezierCurveTo(6.894294, 0.724656, 6.501917, 1.071246, 6.037574, 1.118076);\n        this.ctx.bezierCurveTo(4.897749, 1.233166, 3.744165, 1.186076, 2.600633, 1.117816);\n        this.ctx.bezierCurveTo(2.323085, 1.101116, 2.082050, 0.895296, 1.805825, 0.865396);\n        this.ctx.bezierCurveTo(1.669829, 0.850596, 1.530923, 0.917296, 1.413977, 0.988696);\n        this.ctx.bezierCurveTo(1.315817, 1.048996, 1.229033, 1.140566, 1.183789, 1.246396);\n        this.ctx.bezierCurveTo(1.125849, 1.382926, 1.204959, 1.566546, 1.117649, 1.686406);\n        this.ctx.bezierCurveTo(0.976097, 1.881136, 0.656480, 1.912356, 0.544297, 2.125346);\n        this.ctx.bezierCurveTo(0.299028, 2.590746, 0.114613, 3.111446, 0.089742, 3.636906);\n        this.ctx.bezierCurveTo(-0.027468, 6.108646, -0.042285, 8.591236, 0.120172, 11.060326);\n        this.ctx.bezierCurveTo(0.200872, 12.285346, 0.462543, 13.501636, 0.816556, 14.677446);\n        this.ctx.moveTo(1.681743, 13.693456);\n        this.ctx.lineTo(1.681743, 13.693456);\n        this.ctx.bezierCurveTo(1.503943, 12.721376, 1.203377, 11.763856, 1.148079, 10.777216);\n        this.ctx.bezierCurveTo(1.024783, 8.576686, 1.079819, 6.368206, 1.148343, 4.165286);\n        this.ctx.bezierCurveTo(1.154143, 3.976106, 1.324556, 3.826086, 1.369800, 3.642206);\n        this.ctx.bezierCurveTo(1.412660, 3.468366, 1.408690, 3.285276, 1.408690, 3.106156);\n        this.ctx.bezierCurveTo(1.408690, 2.838926, 1.422180, 2.567466, 1.370060, 2.305526);\n        this.ctx.bezierCurveTo(1.349690, 2.203666, 1.119499, 2.115296, 1.197286, 2.046236);\n        this.ctx.bezierCurveTo(1.352067, 1.909186, 1.598924, 1.900716, 1.804770, 1.919766);\n        this.ctx.bezierCurveTo(2.082317, 1.945466, 2.322295, 2.159216, 2.600636, 2.176146);\n        this.ctx.bezierCurveTo(3.744168, 2.245446, 4.895899, 2.274346, 6.037312, 2.176406);\n        this.ctx.bezierCurveTo(6.932927, 2.099706, 7.784356, 1.670266, 8.683145, 1.654916);\n        this.ctx.bezierCurveTo(9.257027, 1.644916, 10.181216, 1.552786, 10.346052, 2.102596);\n        this.ctx.bezierCurveTo(10.697948, 3.276016, 9.909754, 4.527236, 9.911870, 5.752256);\n        this.ctx.bezierCurveTo(9.915570, 7.694556, 10.276995, 9.621256, 10.363250, 11.561446);\n        this.ctx.bezierCurveTo(10.368050, 11.669396, 10.215612, 11.727606, 10.181745, 11.829996);\n        this.ctx.bezierCurveTo(10.152375, 11.918396, 10.151315, 12.021296, 10.181745, 12.109136);\n        this.ctx.bezierCurveTo(10.215875, 12.207036, 10.346316, 12.257826, 10.365631, 12.359696);\n        this.ctx.bezierCurveTo(10.421991, 12.656556, 10.691598, 13.182286, 10.401081, 13.265096);\n        this.ctx.bezierCurveTo(8.738175, 13.738706, 6.968906, 13.703776, 5.243558, 13.818076);\n        this.ctx.bezierCurveTo(4.188664, 13.888176, 3.128214, 13.854876, 2.071730, 13.817816);\n        this.ctx.moveTo(20.338041, 13.245786);\n        this.ctx.lineTo(20.338041, 13.245786);\n        this.ctx.bezierCurveTo(18.658731, 13.262686, 16.977304, 13.208186, 15.300375, 13.296586);\n        this.ctx.bezierCurveTo(15.022298, 13.311386, 14.782585, 13.530736, 14.504773, 13.553226);\n        this.ctx.bezierCurveTo(13.714198, 13.617026, 12.917008, 13.604026, 12.125375, 13.553226);\n        this.ctx.bezierCurveTo(11.964243, 13.542926, 11.708127, 13.529426, 11.676641, 13.371196);\n        this.ctx.bezierCurveTo(11.385070, 11.909636, 11.276856, 10.413686, 11.202243, 8.925136);\n        this.ctx.bezierCurveTo(11.118373, 7.252706, 11.091383, 5.572606, 11.202243, 3.901756);\n        this.ctx.bezierCurveTo(11.248813, 3.199816, 11.472648, 2.519046, 11.671614, 1.844356);\n        this.ctx.bezierCurveTo(11.694104, 1.768656, 11.775066, 1.687726, 11.853648, 1.693016);\n        this.ctx.bezierCurveTo(12.129873, 1.711816, 12.378316, 1.896216, 12.654541, 1.911566);\n        this.ctx.bezierCurveTo(13.710493, 1.969766, 14.774648, 2.015546, 15.826895, 1.911826);\n        this.ctx.bezierCurveTo(16.551325, 1.840426, 17.224689, 1.478966, 17.947002, 1.390066);\n        this.ctx.bezierCurveTo(18.646560, 1.304066, 19.357495, 1.351466, 20.061023, 1.390596);\n        this.ctx.bezierCurveTo(20.187493, 1.397596, 20.422443, 1.400896, 20.415300, 1.527126);\n        this.ctx.bezierCurveTo(20.384610, 2.068456, 20.086158, 2.561646, 19.964450, 3.089756);\n        this.ctx.bezierCurveTo(19.923700, 3.267286, 19.930850, 3.453026, 19.930050, 3.635326);\n        this.ctx.bezierCurveTo(19.920550, 5.751196, 19.825275, 7.870246, 19.933450, 9.983466);\n        this.ctx.bezierCurveTo(19.987950, 11.050536, 20.285611, 12.091666, 20.417109, 13.151856);\n        this.ctx.moveTo(30.129430, 12.983056);\n        this.ctx.lineTo(30.129430, 12.983056);\n        this.ctx.bezierCurveTo(28.537700, 12.999156, 26.943850, 12.944956, 25.354500, 13.032056);\n        this.ctx.bezierCurveTo(25.076420, 13.047356, 24.836970, 13.269646, 24.558900, 13.288696);\n        this.ctx.bezierCurveTo(23.634970, 13.351396, 22.175000, 14.113136, 21.780770, 13.275196);\n        this.ctx.bezierCurveTo(20.710800, 10.999516, 21.088620, 8.283036, 21.023000, 5.768966);\n        this.ctx.bezierCurveTo(20.993100, 4.630466, 21.300550, 3.507306, 21.496340, 2.385476);\n        this.ctx.bezierCurveTo(21.555040, 2.048926, 21.586040, 1.679566, 21.785530, 1.402286);\n        this.ctx.bezierCurveTo(21.863830, 1.293536, 22.057000, 1.391986, 22.186380, 1.426386);\n        this.ctx.bezierCurveTo(22.369200, 1.474786, 22.520020, 1.635666, 22.708660, 1.647046);\n        this.ctx.bezierCurveTo(23.764350, 1.710246, 24.833270, 1.789916, 25.881280, 1.647306);\n        this.ctx.bezierCurveTo(26.701750, 1.535656, 27.449200, 1.109406, 28.248510, 0.892716);\n        this.ctx.bezierCurveTo(28.424190, 0.845116, 28.611250, 0.857816, 28.793280, 0.857816);\n        this.ctx.bezierCurveTo(28.975320, 0.857816, 29.166610, 0.831316, 29.337800, 0.893016);\n        this.ctx.bezierCurveTo(29.655300, 1.007046, 30.046090, 1.090126, 30.227850, 1.374286);\n        this.ctx.bezierCurveTo(30.395860, 1.637546, 30.287950, 2.002146, 30.244550, 2.311446);\n        this.ctx.bezierCurveTo(30.218050, 2.499036, 30.068340, 2.650906, 30.023100, 2.834786);\n        this.ctx.bezierCurveTo(29.980200, 3.008616, 29.985300, 3.191716, 29.984200, 3.370836);\n        this.ctx.bezierCurveTo(29.973600, 5.222656, 29.912200, 7.075796, 29.988200, 8.926026);\n        this.ctx.bezierCurveTo(29.999600, 9.204636, 30.225530, 9.443816, 30.244840, 9.721626);\n        this.ctx.bezierCurveTo(30.311740, 10.688946, 30.278940, 11.661286, 30.244580, 12.630196);\n        this.ctx.moveTo(40.448420, 12.718596);\n        this.ctx.lineTo(40.448420, 12.718596);\n        this.ctx.bezierCurveTo(38.768580, 12.734696, 37.086890, 12.686096, 35.408900, 12.767596);\n        this.ctx.bezierCurveTo(35.219990, 12.776596, 35.069710, 12.943806, 34.885820, 12.989046);\n        this.ctx.bezierCurveTo(34.711990, 13.031946, 34.528900, 13.025546, 34.349770, 13.027946);\n        this.ctx.bezierCurveTo(33.644660, 13.036946, 32.937430, 13.076046, 32.233900, 13.023946);\n        this.ctx.bezierCurveTo(32.071980, 13.012046, 31.830150, 12.994046, 31.783050, 12.838476);\n        this.ctx.bezierCurveTo(31.502860, 11.915606, 31.357870, 10.946966, 31.310770, 9.983356);\n        this.ctx.bezierCurveTo(31.198850, 7.693656, 31.297770, 5.398396, 31.307770, 3.106046);\n        this.ctx.bezierCurveTo(31.308560, 2.923746, 31.294570, 2.736416, 31.342170, 2.560736);\n        this.ctx.bezierCurveTo(31.474460, 2.074696, 31.430770, 1.423556, 31.844080, 1.135686);\n        this.ctx.bezierCurveTo(32.174810, 0.904976, 32.624870, 1.363236, 33.027300, 1.385986);\n        this.ctx.bezierCurveTo(34.083520, 1.445786, 35.145560, 1.451286, 36.201240, 1.381986);\n        this.ctx.bezierCurveTo(36.479320, 1.363686, 36.719830, 1.155236, 36.996850, 1.125336);\n        this.ctx.bezierCurveTo(37.522570, 1.068736, 38.057030, 1.068736, 38.582490, 1.125336);\n        this.ctx.bezierCurveTo(38.859780, 1.155236, 39.102130, 1.343626, 39.378100, 1.381986);\n        this.ctx.bezierCurveTo(39.642410, 1.418486, 39.915990, 1.398386, 40.177930, 1.347086);\n        this.ctx.bezierCurveTo(40.279800, 1.326986, 40.337210, 1.202896, 40.437220, 1.174316);\n        this.ctx.bezierCurveTo(40.473720, 1.163716, 40.519020, 1.209816, 40.524820, 1.247316);\n        this.ctx.bezierCurveTo(40.553120, 1.429346, 40.557620, 1.616936, 40.533820, 1.799496);\n        this.ctx.moveTo(9.755219, 1.337526);\n        this.ctx.lineTo(9.755219, 1.337526);\n        this.ctx.bezierCurveTo(9.636421, 1.309726, 9.402264, 1.376426, 9.399089, 1.254426);\n        this.ctx.bezierCurveTo(9.396189, 1.133776, 9.633246, 1.139066, 9.750721, 1.166626);\n        this.ctx.fill();\n\n        // fill the first cell with tape background color\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.transform(0.264583, 0.000000, 0.000000, 0.264583, 0.000000, 0.000000);\n        this.ctx.fillStyle = this.backgroundColor;\n        this.ctx.lineWidth = 0.016785;\n        this.ctx.moveTo(34.467867, 6.258842);\n        this.ctx.bezierCurveTo(32.658533, 6.256906, 30.837482, 6.370921, 29.088429, 6.867096);\n        this.ctx.bezierCurveTo(26.505157, 7.525553, 23.921437, 8.322273, 21.232907, 8.372382);\n        this.ctx.bezierCurveTo(17.401370, 8.494923, 13.557678, 8.528086, 9.733334, 8.230513);\n        this.ctx.bezierCurveTo(8.768843, 8.110203, 7.929301, 7.527537, 7.009943, 7.295999);\n        this.ctx.bezierCurveTo(6.223647, 7.318255, 5.354094, 7.157642, 4.680069, 7.672825);\n        this.ctx.bezierCurveTo(4.315389, 7.825605, 4.734953, 8.139480, 4.884354, 8.280949);\n        this.ctx.bezierCurveTo(5.462339, 8.728010, 5.212453, 9.536175, 5.288732, 10.160795);\n        this.ctx.bezierCurveTo(5.268733, 11.376665, 5.379426, 12.607252, 5.193151, 13.812968);\n        this.ctx.bezierCurveTo(4.994020, 14.537806, 4.368641, 15.108933, 4.394100, 15.902718);\n        this.ctx.bezierCurveTo(4.164952, 21.270516, 4.101303, 26.645705, 4.124507, 32.018300);\n        this.ctx.bezierCurveTo(4.173929, 35.482173, 4.178169, 38.955982, 4.529650, 42.405473);\n        this.ctx.bezierCurveTo(4.939525, 45.542286, 5.789851, 48.598272, 6.379276, 51.702296);\n        this.ctx.bezierCurveTo(7.086178, 51.929186, 7.769072, 52.284872, 8.531996, 52.211220);\n        this.ctx.bezierCurveTo(12.949589, 52.416845, 17.377057, 52.366561, 21.790209, 52.086429);\n        this.ctx.bezierCurveTo(27.613526, 51.759703, 33.531999, 51.713972, 39.188823, 50.126868);\n        this.ctx.bezierCurveTo(39.769011, 50.046048, 39.831899, 49.381978, 39.720863, 48.918564);\n        this.ctx.bezierCurveTo(39.558908, 48.132356, 39.327992, 47.352350, 39.077187, 46.594142);\n        this.ctx.bezierCurveTo(38.791875, 46.172681, 38.299512, 45.805791, 38.380231, 45.231579);\n        this.ctx.bezierCurveTo(38.281731, 44.592243, 38.912680, 44.245197, 39.139882, 43.733714);\n        this.ctx.bezierCurveTo(38.892822, 38.693265, 38.208623, 33.686307, 37.777976, 28.660001);\n        this.ctx.bezierCurveTo(37.579889, 26.076655, 37.352922, 23.481717, 37.478566, 20.889497);\n        this.ctx.bezierCurveTo(37.704240, 17.800974, 38.932318, 14.896696, 39.313469, 11.835103);\n        this.ctx.bezierCurveTo(39.362789, 10.448664, 39.511386, 8.985794, 38.943990, 7.678277);\n        this.ctx.bezierCurveTo(38.384038, 6.603054, 37.054285, 6.377576, 35.957430, 6.288455);\n        this.ctx.bezierCurveTo(35.461667, 6.255740, 34.964483, 6.254652, 34.467867, 6.258842);\n        this.ctx.fill();\n        this.ctx.restore();\n        \n        // fill the small spot in tape frame with tape background color\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.transform(0.264583, 0.000000, 0.000000, 0.264583, 0.000000, 0.000000);\n        this.ctx.fillStyle = this.backgroundColor;\n        this.ctx.lineWidth = 0.016785;\n        this.ctx.moveTo(36.240053, 4.410208);\n        this.ctx.bezierCurveTo(35.988808, 4.388763, 35.445949, 4.497755, 35.629211, 4.856259);\n        this.ctx.bezierCurveTo(35.965327, 5.048036, 36.419261, 5.012958, 36.793529, 4.966037);\n        this.ctx.bezierCurveTo(36.950659, 4.828731, 36.784529, 4.581475, 36.788529, 4.408969);\n        this.ctx.bezierCurveTo(36.605694, 4.409683, 36.422830, 4.407459, 36.240010, 4.410209);\n        this.ctx.fill();\n        this.ctx.restore();\n        \n        // fill the second cell with tape background color\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.transform(0.264583, 0.000000, 0.000000, 0.264583, 0.000000, 0.000000);\n        this.ctx.fillStyle = this.backgroundColor;\n        this.ctx.lineWidth = 0.016785;\n        this.ctx.moveTo(70.612391, 5.120916);\n        this.ctx.bezierCurveTo(68.647789, 5.099834, 66.684779, 5.383236, 64.817937, 6.001000);\n        this.ctx.bezierCurveTo(62.803559, 6.625629, 60.768222, 7.279063, 58.642137, 7.354040);\n        this.ctx.bezierCurveTo(55.886527, 7.509637, 53.121671, 7.463954, 50.364025, 7.382331);\n        this.ctx.bezierCurveTo(48.992945, 7.280707, 47.558115, 7.398056, 46.268719, 6.832297);\n        this.ctx.bezierCurveTo(45.730004, 6.702373, 45.175019, 6.355504, 44.611196, 6.481869);\n        this.ctx.bezierCurveTo(44.042765, 6.749669, 44.058287, 7.497476, 43.840023, 8.007488);\n        this.ctx.bezierCurveTo(43.074793, 10.488636, 42.428036, 13.027461, 42.312841, 15.633160);\n        this.ctx.bezierCurveTo(42.095986, 19.805803, 42.114356, 23.987909, 42.179398, 28.164568);\n        this.ctx.bezierCurveTo(42.336176, 34.743675, 42.678956, 41.337012, 43.684528, 47.847272);\n        this.ctx.bezierCurveTo(43.872255, 48.811394, 43.953110, 49.815425, 44.282853, 50.741428);\n        this.ctx.bezierCurveTo(44.806718, 51.219515, 45.599563, 51.126613, 46.259520, 51.221675);\n        this.ctx.bezierCurveTo(48.918469, 51.387207, 51.587489, 51.331460, 54.248257, 51.240385);\n        this.ctx.bezierCurveTo(55.480386, 51.274765, 56.490024, 50.443446, 57.667800, 50.246730);\n        this.ctx.bezierCurveTo(60.730670, 50.038781, 63.805033, 50.092691, 66.873357, 50.049916);\n        this.ctx.bezierCurveTo(70.211998, 50.032356, 73.550669, 50.021096, 76.889323, 50.006306);\n        this.ctx.bezierCurveTo(77.310234, 49.591672, 76.970113, 48.981493, 76.958833, 48.481430);\n        this.ctx.bezierCurveTo(76.327049, 44.509195, 75.348425, 40.573051, 75.249739, 36.533724);\n        this.ctx.bezierCurveTo(75.041807, 30.797328, 75.153969, 25.055065, 75.226419, 19.316989);\n        this.ctx.bezierCurveTo(75.277689, 16.833783, 75.287519, 14.344731, 75.364637, 11.865172);\n        this.ctx.bezierCurveTo(75.849129, 9.850336, 76.880644, 7.979361, 77.117305, 5.905223);\n        this.ctx.bezierCurveTo(77.170732, 5.353462, 76.460906, 5.360233, 76.085935, 5.309992);\n        this.ctx.bezierCurveTo(74.265958, 5.164459, 72.437774, 5.118045, 70.612391, 5.120916);\n        this.ctx.fill();\n        this.ctx.restore();\n        \n        // fill the third cell with tape background color\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.transform(0.264583, 0.000000, 0.000000, 0.264583, 0.000000, 0.000000);\n        this.ctx.fillStyle = this.backgroundColor;\n        this.ctx.lineWidth = 0.033570;\n        this.ctx.moveTo(109.420580, 3.326799);\n        this.ctx.bezierCurveTo(107.875340, 3.290394, 106.318140, 3.418320, 104.897870, 4.076908);\n        this.ctx.bezierCurveTo(101.730230, 5.241485, 98.513325, 6.568835, 95.073097, 6.495745);\n        this.ctx.bezierCurveTo(91.850388, 6.532951, 88.597784, 6.606351, 85.400724, 6.157985);\n        this.ctx.bezierCurveTo(84.465271, 5.899340, 83.571825, 5.102688, 82.576972, 5.243085);\n        this.ctx.bezierCurveTo(81.585913, 6.275240, 81.610817, 7.875709, 81.279182, 9.196415);\n        this.ctx.bezierCurveTo(80.585437, 13.138624, 79.533334, 17.054093, 79.618077, 21.089278);\n        this.ctx.bezierCurveTo(79.566287, 27.893418, 79.222459, 34.728848, 79.956908, 41.508859);\n        this.ctx.bezierCurveTo(80.371942, 44.532454, 81.113169, 47.573958, 82.532367, 50.290048);\n        this.ctx.bezierCurveTo(83.257091, 51.696102, 84.982854, 51.655334, 86.327768, 51.440613);\n        this.ctx.bezierCurveTo(88.562859, 51.076627, 90.756129, 50.487380, 92.984835, 50.088086);\n        this.ctx.bezierCurveTo(94.307511, 49.704868, 95.566062, 49.011051, 96.989337, 49.142478);\n        this.ctx.bezierCurveTo(102.595300, 49.045528, 108.202670, 49.058198, 113.809230, 49.011616);\n        this.ctx.bezierCurveTo(114.594250, 46.670220, 114.271230, 44.152920, 114.381910, 41.727598);\n        this.ctx.bezierCurveTo(114.308210, 39.809725, 114.497370, 37.833441, 114.016650, 35.960403);\n        this.ctx.bezierCurveTo(113.645640, 34.988202, 113.050760, 34.072672, 113.240420, 32.987982);\n        this.ctx.bezierCurveTo(113.227820, 25.544754, 113.082930, 18.097518, 113.373590, 10.657651);\n        this.ctx.bezierCurveTo(114.191570, 9.121224, 114.812520, 7.242986, 114.306090, 5.513193);\n        this.ctx.bezierCurveTo(113.615340, 4.180862, 111.960910, 3.833846, 110.650940, 3.397672);\n        this.ctx.bezierCurveTo(110.245960, 3.319715, 109.831070, 3.327136, 109.420580, 3.326799);\n        this.ctx.fill();\n        this.ctx.restore();\n        \n        // fill the fourth cell with tape background color\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.transform(0.264583, 0.000000, 0.000000, 0.264583, 0.000000, 0.000000);\n        this.ctx.fillStyle = this.backgroundColor;\n        this.ctx.lineWidth = 0.033570;\n        this.ctx.moveTo(142.493550, 4.154720);\n        this.ctx.bezierCurveTo(140.870070, 4.125212, 139.254010, 4.365957, 137.765160, 5.035919);\n        this.ctx.bezierCurveTo(134.431940, 5.624309, 131.013430, 5.472439, 127.642030, 5.409518);\n        this.ctx.bezierCurveTo(126.142110, 5.253425, 124.530430, 5.591566, 123.178400, 4.780859);\n        this.ctx.bezierCurveTo(122.188130, 4.333128, 120.761500, 3.682986, 119.943920, 4.789099);\n        this.ctx.bezierCurveTo(118.955060, 6.269244, 118.866750, 8.141607, 118.521270, 9.844346);\n        this.ctx.bezierCurveTo(118.225370, 14.767302, 118.363220, 19.707501, 118.279910, 24.637636);\n        this.ctx.bezierCurveTo(118.328310, 30.732343, 118.032350, 36.873260, 118.935110, 42.922515);\n        this.ctx.bezierCurveTo(119.300960, 44.854430, 119.555110, 46.866261, 120.358010, 48.669142);\n        this.ctx.bezierCurveTo(121.193130, 49.375816, 122.446320, 49.097901, 123.463220, 49.235192);\n        this.ctx.bezierCurveTo(126.263950, 49.276782, 129.098370, 49.249082, 131.875310, 49.033219);\n        this.ctx.bezierCurveTo(132.856050, 48.578665, 133.778370, 47.876981, 134.916610, 48.088550);\n        this.ctx.bezierCurveTo(140.857190, 48.056410, 146.797770, 48.024270, 152.738360, 47.992130);\n        this.ctx.bezierCurveTo(152.978410, 41.904471, 152.897190, 35.807013, 152.982700, 29.715261);\n        this.ctx.bezierCurveTo(153.024800, 21.353555, 153.121840, 12.990871, 153.076100, 4.629506);\n        this.ctx.bezierCurveTo(152.643740, 4.265509, 152.266210, 5.181598, 151.772140, 5.136518);\n        this.ctx.bezierCurveTo(150.073450, 5.562051, 148.285190, 5.320393, 146.709950, 4.580441);\n        this.ctx.bezierCurveTo(145.346870, 4.182396, 143.903510, 4.141378, 142.493530, 4.154710);\n        this.ctx.fill();\n        this.ctx.restore();\n    }\n\n    /** Draw digit zero */\n    private drawZero(color: string = this.digitColor): void {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = color;\n        this.ctx.lineWidth = 0.070004;\n        this.ctx.moveTo(2.363241, 7.851807);\n        this.ctx.lineTo(2.363241, 7.851807);\n        this.ctx.bezierCurveTo(2.647930, 7.656280, 2.973106, 7.509172, 3.217049, 7.264697);\n        this.ctx.bezierCurveTo(3.398026, 7.083193, 3.488514, 6.829457, 3.608106, 6.602974);\n        this.ctx.bezierCurveTo(3.762884, 6.310080, 3.935660, 6.022742, 4.039906, 5.708418);\n        this.ctx.bezierCurveTo(4.243103, 5.095378, 4.514566, 4.478634, 4.525945, 3.832786);\n        this.ctx.bezierCurveTo(4.535206, 3.303884, 4.271678, 2.804351, 4.099172, 2.304288);\n        this.ctx.bezierCurveTo(3.946508, 1.860847, 3.791727, 1.411055, 3.552543, 1.007565);\n        this.ctx.bezierCurveTo(3.421045, 0.785580, 3.231072, 0.585290, 3.005650, 0.459613);\n        this.ctx.bezierCurveTo(2.618300, 0.243184, 2.193643, 0.070411, 1.754700, 0.004265);\n        this.ctx.bezierCurveTo(1.589335, -0.020605, 1.390897, 0.065649, 1.293266, 0.201380);\n        this.ctx.bezierCurveTo(0.967035, 0.654347, 0.742404, 1.176634, 0.536822, 1.695482);\n        this.ctx.bezierCurveTo(0.333093, 2.209567, 0.162966, 2.742174, 0.070362, 3.287480);\n        this.ctx.bezierCurveTo(-0.004250, 3.726953, -0.027269, 4.183888, 0.039406, 4.624949);\n        this.ctx.bezierCurveTo(0.121162, 5.166815, 0.314837, 5.688045, 0.510100, 6.200278);\n        this.ctx.bezierCurveTo(0.642391, 6.546353, 0.772831, 6.910949, 1.017835, 7.189026);\n        this.ctx.bezierCurveTo(1.285593, 7.492503, 1.642252, 7.716870, 2.005260, 7.895728);\n        this.ctx.moveTo(2.298418, 6.832103);\n        this.ctx.lineTo(2.298418, 6.832103);\n        this.ctx.bezierCurveTo(2.148929, 6.837103, 1.976420, 6.926563, 1.849949, 6.846923);\n        this.ctx.bezierCurveTo(1.671091, 6.734472, 1.571872, 6.519895, 1.491968, 6.324632);\n        this.ctx.bezierCurveTo(1.230560, 5.685399, 0.972856, 5.036640, 0.833156, 4.360365);\n        this.ctx.bezierCurveTo(0.760660, 4.010057, 0.793733, 3.638317, 0.864377, 3.287480);\n        this.ctx.bezierCurveTo(0.954070, 2.842715, 1.117054, 2.411974, 1.308347, 2.000811);\n        this.ctx.bezierCurveTo(1.416827, 1.767713, 1.541445, 1.514242, 1.756022, 1.372690);\n        this.ctx.bezierCurveTo(1.841482, 1.316069, 1.917418, 1.533028, 2.020077, 1.530647);\n        this.ctx.bezierCurveTo(2.122735, 1.528267, 2.179356, 1.391740, 2.277516, 1.360784);\n        this.ctx.bezierCurveTo(2.366151, 1.332738, 2.476218, 1.314217, 2.556387, 1.361049);\n        this.ctx.bezierCurveTo(2.736833, 1.466088, 2.922835, 1.601290, 3.012529, 1.789938);\n        this.ctx.bezierCurveTo(3.322618, 2.441872, 3.731931, 3.110738, 3.732195, 3.832786);\n        this.ctx.bezierCurveTo(3.732195, 4.638178, 3.360456, 5.412878, 3.013058, 6.139424);\n        this.ctx.fill();\n    }\n\n    /** Draw digit one */\n    private drawOne(color: string = this.digitColor) {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = color;\n        this.ctx.lineWidth = 0.070004;\n        this.ctx.moveTo(1.247626, 7.284783);\n        this.ctx.lineTo(1.247626, 7.284783);\n        this.ctx.bezierCurveTo(1.860666, 7.065713, 2.504926, 6.919393, 3.087006, 6.627293);\n        this.ctx.bezierCurveTo(3.158206, 6.591893, 2.955246, 6.507443, 2.955776, 6.428063);\n        this.ctx.bezierCurveTo(2.956046, 6.345763, 3.142836, 6.282813, 3.089126, 6.220633);\n        this.ctx.bezierCurveTo(2.904716, 6.007113, 2.455716, 6.031453, 2.378986, 5.759993);\n        this.ctx.bezierCurveTo(1.861456, 3.928813, 1.758006, 2.003973, 1.370656, 0.140773);\n        this.ctx.bezierCurveTo(1.354756, 0.063773, 1.260326, -0.001047, 1.182006, 0.000013);\n        this.ctx.bezierCurveTo(1.101606, 0.001013, 1.018236, 0.070413, 0.989396, 0.145533);\n        this.ctx.bezierCurveTo(0.631946, 1.076073, 0.267346, 2.010843, 0.036896, 2.980813);\n        this.ctx.bezierCurveTo(0.015696, 3.069713, 0.216016, 3.137713, 0.290626, 3.084793);\n        this.ctx.bezierCurveTo(0.526636, 2.916783, 0.677716, 2.169863, 0.839106, 2.410373);\n        this.ctx.bezierCurveTo(1.246566, 3.017583, 1.189416, 3.833823, 1.279906, 4.559583);\n        this.ctx.bezierCurveTo(1.335506, 5.004613, 1.494486, 5.514193, 1.274906, 5.905253);\n        this.ctx.bezierCurveTo(1.025676, 6.348953, 0.417926, 6.459553, 0.028196, 6.787373);\n        this.ctx.bezierCurveTo(-0.014404, 6.823373, -0.003804, 6.908553, 0.027396, 6.955113);\n        this.ctx.bezierCurveTo(0.120796, 7.094813, 0.218956, 7.270763, 0.381416, 7.314683);\n        this.ctx.fill();\n    }\n\n    /** Draw digit at tape index */\n    private drawDigit(tapeIndex: number): void {\n        // zeros are wider then ones' therefore different offset for each digit\n        let color = (tapeIndex == this.tape.currentLocationIndex && this.animationPhase == AnimationPhases.Standstill) ? \n            this.currentDigitColor : this.digitColor;\n        if (this.tape.read(tapeIndex) == 0) {\n            this.ctx.translate(3, 0);\n            this.drawZero(color);\n            this.ctx.translate(-3, 0);\n        } else if (this.tape.read(tapeIndex) == 1) {\n            this.ctx.translate(4, 0);\n            this.drawOne(color);\n            this.ctx.translate(-4, 0);\n        }\n    }\n\n    /** Draw all the visible chunks */ \n    private drawVisibleChunks(): void {\n        let v =  this.numberOfVisibleChunks;\n        for (var i = 0; i < v; i++) {\n            this.drawChunk();\n            this.ctx.translate(CHUNK_OF_CELLS_WIDTH, 0)\n        }\n    }\n\n    /** Draw all the visible digits */\n    private drawVisibleDigits(): void {\n        let chunksToTheLeft = this.numberOfChunksToTheLeftOfTheCurrent;\n        let v =  this.numberOfVisibleChunks;\n        // lower the text inside the tape so it will be in the middle \n        this.ctx.translate(0, 3.5);\n        let visibleDigits = this.visibleDigitsIndexRange;\n        //console.log(\"start from: %s, endAt: %s, currentLocationIndex: %s, numberOfVisibleChunks: %s, chunksToTheLeft: %s\", \n        //    visibleDigits.from, visibleDigits.to, this.tape.currentLocationIndex, v, chunksToTheLeft);\n        for (var i = visibleDigits.from ; i < visibleDigits.to; i++) {\n            this.drawDigit(i);\n            this.ctx.translate(CELL_WIDTH, 0);\n        }        \n    }\n\n    /** Dispatch a tape event */\n    private dispatchTapeViewEvent(type: string): boolean {\n        return this.dispatchEvent(new CustomEvent(type, { detail: { tapeView: this } }));\n    }\n\n    /** Number of visible cell chunks, positive integer\n     * @returns {number} number of visible cell chunks\n     */\n    private get numberOfVisibleChunks(): number {\n        return Math.ceil(this.ctx.canvas.width / (CHUNK_OF_CELLS_WIDTH * this.xScale)) + 1;\n    }\n\n    /** The (four cell) chunk index of the current location tape index, either a positive or negative integer\n    * for example:\n    * | currentLocationIndex | absolute chunk index | \n    * | :--------------- | :------------------ |\n    * | -6 | -2 |\n    * | -5 | -2 |\n    * | -4 | -1 |\n    * | -3 | -1 |\n    * | -2 | -1 |\n    * | -1 | -1 |\n    * | 0 | 0 |\n    * | 1 | 0 |\n    * | 2 | 0 |\n    * | 3 | 0 |\n    * | 4 | 1 |\n    * | 5 | 1 |\n    * @returns {number} absolute chunk index\n     */\n    private get currentLocationChunkIndex(): number {\n        let l = this.tape.currentLocationIndex;\n        return l >= 0 ? Math.floor(l/CELLS_IN_CHUNK) : -(Math.floor(Math.abs(l + 1)/CELLS_IN_CHUNK) + 1);\n    }\n\n    /** Cell index within chunk of the current location index\n    * for example:\n    * | currentLocationIndex | index within chunk | \n    * | :--------------- | :------------------ |\n    * | -6 | 2 |\n    * | -5 | 3 |\n    * | -4 | 0 |\n    * | -3 | 1 |\n    * | -2 | 2 |\n    * | -1 | 3 |\n    * | 0 | 0 |\n    * | 1 | 1 |\n    * | 2 | 2 |\n    * | 3 | 3 |\n    * | 4 | 0 |\n    * | 5 | 1 |\n    * | 6 | 2 |\n    * @returns {number} cell index within chunk\n    */\n    private get currentLocationIndexWithinChunk(): number {\n        let l = this.tape.currentLocationIndex;\n        return l >= 0 ? l % CELLS_IN_CHUNK : (CELLS_IN_CHUNK - 1) - (Math.abs(l + 1) % CELLS_IN_CHUNK)\n    }\n\n    /** Determines the x and y coordinates in the original scale (millimeters) of the current \n    * absolute chunk. It is positioned in such way that the current location index will be \n    * displayed both vertically and horizontally centered on the screen.\n    *\n    * from half, offset to left half of a single cell so it will be centered, \n    * and currentLocationIndexWithinChunk times the scaled cell width so it \n    * will be in the correct cell inside the chunk. \n    * @returns { x : number, y : number } x and y coordinates of the current absolute chunk\n    */\n    private get currentChunkTopLeft(): { x: number, y: number } {\n        return {\n            x: Math.floor((this.canvas.width / this.xScale) / 2) - Math.floor(CELL_WIDTH / 2) - \n                Math.floor(this.currentLocationIndexWithinChunk * CELL_WIDTH),\n            y: Math.floor((this.canvas.height / this.yScale) / 2) - Math.floor(CELL_HEIGHT / 2)\n        };\n    }\n\n    /** How many chunks do we need to draw on the left side of the current chunk?\n    * | number of visible cells | chunks to the left | \n    * | :--------------- | :------------------ |\n    * | 2 | 1 |\n    * | 3 | 1 |\n    * | 4 | 2 |\n    * | 5 | 2 |\n    * | 6 | 3 |\n    */\n    private get numberOfChunksToTheLeftOfTheCurrent(): number {\n        return Math.floor(this.numberOfVisibleChunks / 2);\n    }\n\n    /** The range of visible tape indices */\n    private get visibleDigitsIndexRange(): { from: number, to: number } {\n        let chunksToTheLeft = this.numberOfChunksToTheLeftOfTheCurrent;\n        let v =  this.numberOfVisibleChunks;\n        let startFrom = (this.tape.currentLocationIndex - this.currentLocationIndexWithinChunk) - chunksToTheLeft * CELLS_IN_CHUNK\n        return { \n            from: startFrom,\n            to: startFrom + v * CELLS_IN_CHUNK // not inclusive\n        };\n    }\n\n    /** The top left coordinates of the visible portion of the tape */\n    private get visibleChunksTopLeft(): { x: number; y: number } {\n        let currentChunkTopLeft = this.currentChunkTopLeft;\n        let chunksToTheLeft = this.numberOfChunksToTheLeftOfTheCurrent;\n        let direction = this.animationDirection == AnimationDirections.Left ? -1 : (this.animationDirection == AnimationDirections.Right ? 1 : 0)\n        return {\n            x: currentChunkTopLeft.x - chunksToTheLeft * CHUNK_OF_CELLS_WIDTH + direction * this.animationOffset, \n            y: currentChunkTopLeft.y\n        };\n    }\n\n    /** how far from the center should the current tape location  */\n    private getAnimationOffset(deltaT: number): number {\n        if (this.animationOffset >= CELL_WIDTH/2) {\n            if (this.currentVelocity >= MIN_SPEED) {\n                this.currentVelocity -= deltaT * this.currentAcceleration;\n            }\n        } else {\n            if (this.currentVelocity <= MAX_SPEED) {\n                this.currentVelocity += deltaT * this.currentAcceleration;\n            }\n        }\n        //return deltaT * this.velocity;\n        return deltaT * this.currentVelocity;\n    }\n\n    /** Draw the tape on 2d canvas\n     * @param deltaT {number} time that passed from previous call to draw method\n     */\n    public draw(deltaT: number): void {\n        console.log(\"xscale: %s yscale: %s\", this.xScale, this.yScale);\n        let additionalAnimationOffset = this.getAnimationOffset(deltaT);\n\n        let stopAnimation: boolean = false;\n        if (this.animationOffset + additionalAnimationOffset >= CELL_WIDTH) {\n            stopAnimation = true;\n            this.animationOffset = CELL_WIDTH;\n        } else {\n            this.animationOffset += additionalAnimationOffset;\n        }\n\n        //this.animationOffset += this.getAnimationOffset(deltaT);\n        this.moveToVisibleChunksTopLeft();\n        this.ctx.save();\n        this.drawVisibleChunks();\n        // go back to upper left corner draw the digits\n        this.ctx.restore();\n        this.drawVisibleDigits();\n        if (stopAnimation) {\n            this.animationStop();\n        };       \n    }\n }","import { RunModes, Actions, RunStates, BinaryValues, BinaryValuesUtil } from './common';\nimport { Rule } from './rule';\nimport { RuleSet } from './ruleSet';\nimport { Tape } from './tape';\n\n/**\n * @Class\n * Turing machine class. This class models a turing machine. \n */\nexport class TuringMachine extends EventTarget {\n\n    /** the set of rules the turing machine actions are based on */\n    private _ruleSet: RuleSet;\n    /** the endless tape turing machine acts upon */\n    private _tape: Tape;\n    /** the state of the turing machine */\n    private _state: number;\n    /**  */\n    private _runMode: RunModes;\n    /** how many steps the turing machine performed since instantiation */\n    private _stepsCounter: number;\n    /** indicator of the turing machine life-cycle phase - idle, running and halted */\n    private _runState: RunStates;\n    /**  */\n    private _pauseBeforeTapeAlterationMs: number;\n    /**  */\n    private _pauseAfterTapeAlterationMs: number;\n\n    /** the getter for running state of the Turing machine - idle, running or halted */\n    public get runState(): RunStates {\n        return this._runState;\n    }\n\n    /** the setter for running state of the Turing machine - idle, running or halted */\n    public set runState(value: RunStates) {\n        if (value != this._runState) {\n            let oldValue = this._runState;\n            this._runState = value;\n            this.dispatchRunStateChangedEvent(oldValue);\n        }\n    }\n\n    /** Create an instance of the turing machine class\n     * \n     * @param ruleSet - the set of rules for the turing machine\n     * @param tape - the tape object to be used\n     * @param runMode - single step or normal operation mode\n     * @param pauseBeforeTapeAlterationMs \n     * @param pauseAfterTapeAlterationMs \n     */\n    constructor(ruleSet: RuleSet, tape: Tape, runMode: RunModes = RunModes.Normal, \n                pauseBeforeTapeAlterationMs: number = 500, pauseAfterTapeAlterationMs: number = 500) {\n        super();\n        this._ruleSet = ruleSet;\n        this._tape = tape;\n        this._stepsCounter = 0;\n        this._state = 0;\n        this._runState = RunStates.Idle;\n        this._runMode = runMode;\n        this._tape.addEventListener(\"move-completed\", this.tapeMoveCompleted);\n        this._pauseAfterTapeAlterationMs = pauseAfterTapeAlterationMs;\n        this._pauseBeforeTapeAlterationMs = pauseBeforeTapeAlterationMs;\n    }\n\n    /** Run the turing machine. Executes one full cycle of turing machine processing, then either go idle or keep executing steps depending on run mode. */\n    run(): void {\n        console.log(\"BEFORE STEP: Step counter: %s, Status: %s, State: %s\", \n        this._stepsCounter, this._runState, this._state);\n\n        if (this._runState == RunStates.Halted) {\n            console.log(\"Halted\");\n            return;\n        }\n        if (this._runState == RunStates.Running) {\n            console.log(\"Already RUNNING\");\n            return;\n        }\n        \n        this.runState = RunStates.Running;\n        this._stepsCounter++;\n        let value = this._tape.read();\n        let rule = this._ruleSet.getRule(this._state, value);\n        if (rule == null) {\n            throw new Error('Illegal turing machine state. No rules defined for current state and tape content.');\n        }\n        if (rule.flipTapeValue) {\n            this.dispatchTapeValueChangeEvent(value, BinaryValuesUtil.opposite(value), \"before\");\n            setTimeout(() => { this.continue_running_before_value_update(value, rule); }, this._pauseBeforeTapeAlterationMs);\n        } else {\n            this.continue_running_after_value_update(value, rule);\n        }\n    }\n\n    /** Top turing machine execution by going into halted run state. */\n    stop(): void {\n        this.runState = RunStates.Halted;\n    }\n\n    /** Reset turing machine - set the run state to Idle and set the state to 0. */\n    reset(): void {\n        this.runState = RunStates.Idle;\n        this._state = 0;\n    }\n\n    private continue_running_before_value_update(value: number, rule: Rule): void {\n        this._tape.write(BinaryValuesUtil.opposite(value));\n        this.dispatchTapeValueChangeEvent(value, BinaryValuesUtil.opposite(value), \"after\");\n        setTimeout(() => { this.continue_running_after_value_update(value, rule); }, this._pauseAfterTapeAlterationMs);\n    }\n\n    private continue_running_after_value_update(value: number, rule: Rule): void {\n        this._state = rule.transitionToState;\n        if (rule.action == Actions.MoveLeft) {\n            this._tape.moveRight();\n        } else if (rule.action == Actions.MoveRight) {\n            this._tape.moveLeft();\n        } else {\n            this.runState = RunStates.Halted;\n        }\n\n        console.log(\"AFTER STEP: Step counter: %s, Status: %s, State: %s, last applied rule: %s\", \n            this._stepsCounter, this._runState, this._state, rule.toString());\n    }\n\n    private tapeMoveCompleted = (): void => {\n        // the assumption is that there is a tapeView mounted over the tape that completes the tape moves.\n        // in case there is no tapeView than we should set the tape autocompleteMove flag.\n        console.log(\"tape move completed. run mode %s\", this._runMode);\n        let running = false;\n        if (this._runState == RunStates.Running) {\n            this.runState = RunStates.Idle;\n            running = true;\n        }\n        if (running && this._runMode == RunModes.Normal) {\n            console.log(\"schedule next run.\");\n            setTimeout(() => { this.run(); }, 1);\n        }\n    }\n\n    private dispatchRunStateChangedEvent(oldRunState: RunStates): void {\n        this.dispatchEvent(new CustomEvent<{oldRunState: RunStates; newRunState: RunStates;}>(\n            \"run-state-changed\", { detail: { oldRunState: oldRunState, newRunState: this.runState } }));\n    }\n\n    private dispatchTapeValueChangeEvent(oldTapeValue: BinaryValues, newTapeValue: BinaryValues, changeStage: string): void {\n        this.dispatchEvent(new CustomEvent<{oldTapeValue: BinaryValues; newTapeValue: BinaryValues;}>(\n            changeStage + \"-tape-value-changed\", { detail: { oldTapeValue: oldTapeValue, newTapeValue: newTapeValue } }));\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Tape } from './tape';\nimport { TapeView }from './tapeView';\nimport { RuleSet }from './ruleSet';\nimport { TuringMachine }from './turingMachine';\nimport { RunModes, AnimationPhases, BinaryValues, Actions, RunStates } from './common';\nimport { Rule } from './rule';\nimport { GestureDetector } from './gestureDetector';\n\n// original was in mm for A4 size\nwindow.ORIGINAL_WINDOW_WIDTH = 210; \nwindow.ORIGINAL_WINDOW_HEIGHT = 297;\nwindow.SCALE_FACTOR = window.innerWidth/window.ORIGINAL_WINDOW_WIDTH;\nlet canvas = null;\nlet ctx: CanvasRenderingContext2D = null;\nlet previousTime : Date = null;\nlet tapeView : TapeView = null;\nconst DEFAULT_BACKGROUND_COLOR = \"#F0F0F0\";\nlet gestureDetector:GestureDetector;\nlet initialWindowInnerWidth = window.innerWidth;\n\n// find the largest common denominator for 12 and 8 using Euclidean algorithm for turing machine with unary number representation\nexport let tape = new Tape([ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 ]);\n// reference for use in tests\n(window as any).tape = tape;\nlet euc1RuleSet = new RuleSet([\n  new Rule({ forState: 0, whenRead: BinaryValues.Zero, transitionToState: 0, action: Actions.MoveRight, flipTapeValue: false }),\n  new Rule({ forState: 0, whenRead: BinaryValues.One, transitionToState: 1, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 1, whenRead: BinaryValues.Zero, transitionToState: 2, action: Actions.MoveRight, flipTapeValue: true }),\n  new Rule({ forState: 1, whenRead: BinaryValues.One, transitionToState: 1, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 2, whenRead: BinaryValues.Zero, transitionToState: 10, action: Actions.MoveRight, flipTapeValue: false }),\n  new Rule({ forState: 2, whenRead: BinaryValues.One, transitionToState: 3, action: Actions.MoveRight, flipTapeValue: true }),\n  new Rule({ forState: 3, whenRead: BinaryValues.Zero, transitionToState: 4, action: Actions.MoveRight, flipTapeValue: false }),\n  new Rule({ forState: 3, whenRead: BinaryValues.One, transitionToState: 3, action: Actions.MoveRight, flipTapeValue: false }),\n  new Rule({ forState: 4, whenRead: BinaryValues.Zero, transitionToState: 4, action: Actions.MoveRight, flipTapeValue: false }),\n  new Rule({ forState: 4, whenRead: BinaryValues.One, transitionToState: 5, action: Actions.MoveRight, flipTapeValue: true }),\n  new Rule({ forState: 5, whenRead: BinaryValues.Zero, transitionToState: 7, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 5, whenRead: BinaryValues.One, transitionToState: 6, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 6, whenRead: BinaryValues.Zero, transitionToState: 6, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 6, whenRead: BinaryValues.One, transitionToState: 1, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 7, whenRead: BinaryValues.Zero, transitionToState: 7, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 7, whenRead: BinaryValues.One, transitionToState: 8, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 8, whenRead: BinaryValues.Zero, transitionToState: 9, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 8, whenRead: BinaryValues.One, transitionToState: 8, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 9, whenRead: BinaryValues.Zero, transitionToState: 2, action: Actions.MoveRight, flipTapeValue: false }),\n  new Rule({ forState: 9, whenRead: BinaryValues.One, transitionToState: 1, action: Actions.MoveLeft, flipTapeValue: false }),\n  new Rule({ forState: 10, whenRead: BinaryValues.Zero, transitionToState: 0, action: Actions.Halt, flipTapeValue: false }),\n  new Rule({ forState: 10, whenRead: BinaryValues.One, transitionToState: 10, action: Actions.MoveRight, flipTapeValue: false }),\n]);\nlet turingMachine = new TuringMachine(euc1RuleSet, tape, RunModes.Normal);\n\nfunction animate() {\n    console.log(\"animate start: canvas width: %s height: %s, window inner width %s height %s\", ctx.canvas.width, ctx.canvas.height, window.innerWidth, window.innerHeight);\n    // record the time at the beginning of the animation\n    let currentTime = new Date();\n\n    // recalculate the scale-factor based on the current window inner width\n    SCALE_FACTOR = initialWindowInnerWidth/window.ORIGINAL_WINDOW_WIDTH;\n    //ctx.canvas.width = initialWindowInnerWidth;\n    ctx.canvas.width = window.innerWidth;\n    ctx.canvas.height = window.innerHeight;\n    \n    //ctx.scale(SCALE_FACTOR, SCALE_FACTOR);\n    tapeView.xScale = SCALE_FACTOR;\n    tapeView.yScale = SCALE_FACTOR;\n\n    // clear the whole canvas\n    //ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = DEFAULT_BACKGROUND_COLOR;\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // draw this animation iteration image\n    if (previousTime != null) {\n        let deltaT = currentTime.getTime() - previousTime.getTime();\n        console.log(\"previous time was %s\", deltaT);\n        tapeView.draw(deltaT);\n    } else {\n        console.log(\"previous time was null\");\n        tapeView.draw(0);\n    }\n\n    // if required, schedule further animation iteration\n    if (tapeView.animationPhase != AnimationPhases.Standstill) {\n        previousTime = new Date();\n        window.requestAnimationFrame(animate);\n    } else {\n        previousTime = null;\n    }\n    console.log(\"animate end: canvas width: %s height: %s, window inner width %s height %s\", ctx.canvas.width, ctx.canvas.height, window.innerWidth, window.innerHeight);\n}\n\nlet keyboardHandler = (k: KeyboardEvent): void => {\n    if (k.defaultPrevented) {\n        return; // Do nothing if the event was already processed\n    }\n    switch (k.key) {\n        case \"R\":\n        case \"r\":\n            runStateChangeCommandHandler();\n            break;\n        default:\n            return; // Quit when this doesn't handle the key event.\n    }\n    k.preventDefault();\n}\n\nfunction runStateChangeCommandHandler() {\n    if (turingMachine.runState == RunStates.Running) {\n        turingMachine.stop();\n    } else if (turingMachine.runState == RunStates.Halted) {\n        turingMachine.reset();\n    } else {\n        turingMachine.run();\n    }\n}\n\nlet doubleTapHandler = (e: any): void => {\n    if (e.defaultPrevented) {\n        return; // Do nothing if the event was already processed\n    }    \n    e.preventDefault();\n    runStateChangeCommandHandler();\n    animationStartedHandler();\n}\n\nfunction animationStartedHandler() {\n    window.requestAnimationFrame(animate); \n}\n\ndocument.addEventListener(\"keydown\", keyboardHandler);\n// trigger drawing when the document loading has finished\ndocument.addEventListener(\"DOMContentLoaded\", function(event) { \n    canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n    console.log(\"canvas is %s\", canvas);\n    ctx = canvas.getContext(\"2d\");\n    tapeView = new TapeView(tape, canvas, document.body as HTMLBodyElement);\n    tapeView.addEventListener('animation-started', animationStartedHandler);\n    tapeView.addEventListener('animation-completed', animationStartedHandler);\n    animationStartedHandler();\n    addEventListener(\"resize\", (event) => { animationStartedHandler(); });\n    gestureDetector = GestureDetector.getInstance(canvas);\n    gestureDetector.addEventListener(\"double-tap\", doubleTapHandler);\n    //turingMachine.run();\n    ctx.canvas.width  = window.innerWidth;\n    ctx.canvas.height = window.innerHeight;\n    turingMachine.addEventListener(\"before-tape-value-changed\", animationStartedHandler);\n    turingMachine.addEventListener(\"after-tape-value-changed\", animationStartedHandler);\n});"],"names":[],"sourceRoot":""}